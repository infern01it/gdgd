import React, {Component, Fragment} from 'react';
import {Link} from 'react-router';
import {connect} from 'react-redux';

import classnames from 'classnames';

import {toArr, getPlots, getFilterProps, filteringArrays} from 'selectors';
import {renderSearchResult} from 'functions';

import Header from 'components/Header';
import MainFilter from 'components/MainFilter';
import { CardArray } from 'components/CardArray';
import { CardSite } from 'components/CardSite';
import Modal from 'components/Modal';

import Map from './Map';

class AllCity extends Component {
  constructor(props) {
    super(props);

    this.state = {
      displayFilter: false,
      visibleFilter: false,
      displayMap: false,
      visibleMap: false,
      isOpenArray: false,
      isOpenArrayId: 1,
      isOpenArrayObj: {},
      centerMap: [],
      closeCards: false,
      displayModal: false,
      visibleModal: false,
      dataModal: {}
    };

    this.toggleFilter = this.toggleFilter.bind(this);
    this.toggleMap = this.toggleMap.bind(this);
    this.toggleCards = this.toggleCards.bind(this);
    this.togglePopup = this.togglePopup.bind(this);
    this.updateFilter = this.updateFilter.bind(this);
  }
  
  toggleMap() {
    const { displayMap, visibleMap, displayFilter } = this.state;

    if(displayFilter) {
      this.setState({displayFilter: false});
      this.setState({visibleFilter: false});
    }
    if(!displayMap) {
      this.setState({displayMap: !displayMap});
      setTimeout(() => {
        this.setState({visibleMap: !visibleMap});
      }, 5);
    } else {
      this.setState({visibleMap: !visibleMap});
      setTimeout(() => {
        this.setState({displayMap: !displayMap});
      }, 300);
    }
  }

  toggleCards() {
    this.setState({ closeCards: !this.state.closeCards });
  }

  toggleFilter() {
    const { displayFilter, visibleFilter, displayMap } = this.state;

    if(displayMap) {
      this.setState({displayMap: false});
      this.setState({visibleMap: false});
    }
    if(!displayFilter) {
      this.setState({displayFilter: !displayFilter});
      setTimeout(() => {
        this.setState({visibleFilter: !visibleFilter});
      }, 5);
    } else {
      this.setState({visibleFilter: !visibleFilter});
      setTimeout(() => {
        this.setState({displayFilter: !displayFilter});
      }, 300);
    }
  }

  togglePopup(id) {
    const { displayModal, visibleModal } = this.state;

    if(!displayModal) {
      this.setState({
        displayModal: !displayModal,
        dataModal: {
          form: 'form-land-plot',
          land_plot_id: id
        }
      });
      setTimeout(() => {
        this.setState({visibleModal: !visibleModal});
      }, 5);
    } else {
      this.setState({visibleModal: !visibleModal});
      setTimeout(() => {
        this.setState({displayModal: !displayModal});
      }, 200);
    }
  }

  openViewArray(id) {
    const {arrays, isMobile} = this.props;
    const {displayMap} = this.state;

    this.setState({
      isOpenArray: true,
      isOpenArrayId: id,
      isOpenArrayObj: toArr(arrays).filter(el => el.id === id)[0]
    });

    if(isMobile && displayMap) {
      this.toggleMap();
    }
  }

  setCenterMap(id) {
    const {isMobile} = this.props;

    this.setState({centerMap: this.props.allArrays.filter(el => el.id === id)[0].coords.split(',')});
    
    if(isMobile) {
      this.toggleMap();
    }
  }

  updateFilter() {
    this.setState({centerMap: []});
  }

  closeViewArray() {
    this.setState({isOpenArray: false});
  }

  render() {
    const {
      allArrays,
      arrays,
      filterProps,
      filter
    } = this.props;
    const {
      displayFilter,
      visibleFilter,
      displayMap,
      visibleMap,
      isOpenArray,
      isOpenArrayObj,
      centerMap,
      closeCards,
      displayModal,
      visibleModal,
      dataModal
    } = this.state;

    const filterArrays = toArr(arrays);
    const filterArraysLength = toArr(arrays).length;
    const filterPlotsLength = toArr(getPlots(arrays)).length;

    const mapCardsClass = classnames("page-map__cards", "map-cards", {
      "close": closeCards
    });
    const mapYMapClass = classnames({
      "open": closeCards
    });

    return (
      <Fragment>
        <Header/>
        <main className="main page-map">
          <div className="page-map__toggle-navs map-tgl-navs">
            <button
              onClick={this.toggleFilter}
              className="map-tgl-navs__filter"
            >
              <span>{!visibleFilter ? 'Фильтр' : 'Свернуть фильтр'}</span>
            </button>
            <button
              onClick={this.toggleMap}
              className="map-tgl-navs__map"
            >
              <span>{!visibleMap ? 'Карта' : 'Свернуть карту'}</span>
            </button>
          </div>
          <MainFilter
            pageMap={true}
            filter={filter}
            display={displayFilter}
            visible={visibleFilter}
            toggleFilter={this.toggleFilter}
            updateFilter={this.updateFilter}
          />
          <div className={mapCardsClass}>
            <button
              onClick={this.toggleCards}
              className="map-cards__toggle"
            >
              {
                closeCards && <span>развернуть</span>
              }
              {
                !closeCards && <span>свернуть</span>
              }
            </button>
            <div className="map-cards__wrap">
              <div className="map-cards__head">
                {
                  isOpenArray && <Fragment>
                    <Link
                      to={`/array/${isOpenArrayObj.id}`}
                      className="map-cards__title h2"
                    >{isOpenArrayObj.name}</Link>
                    <button
                      onClick={this.closeViewArray.bind(this)}
                      className="map-cards__back"
                    >
                      <div className="btn btn_arrow_left btn_color_body-text btn_sm">
                        <img src="/img/ui-icon/arrow-left.svg" />
                      </div>
                      <span>Назад к результатам поиска</span>
                    </button>
                  </Fragment>
                }
                {
                  !isOpenArray && <Fragment>
                    <h2 className="map-cards__title">Результаты поиска:</h2>
                    <h2 className="map-cards__subtitle">{renderSearchResult(filterArraysLength, filterPlotsLength)}</h2>
                  </Fragment>
                }
              </div>
              <div className="map-cards__body">
                {
                  isOpenArray && allArrays.length !== 0 && isOpenArrayObj.land_plots.map((element , id) => {
                    return <CardSite
                      key={id}
                      id={element.id}
                      name={element.name}
                      adress={element.adress}
                      area={element.area}
                      price={element.price_total}
                      openPopup={this.togglePopup}
                    />
                  })
                }
                {
                  !isOpenArray && filterArrays.length !== 0 && filterArrays.map((element, id) => {
                    return <CardArray
                      key={id}
                      id={element.id}
                      count={element.land_plots.length}
                      urlImg={element.main_img[0] && element.main_img[0].sizes.sm.url}
                      name={element.name}
                      price100={element.price_100}
                      addClass={['map-cards__item']}
                      onChangeArray={this.openViewArray.bind(this)}
                      onChangeMap={this.setCenterMap.bind(this)}
                    />
                  })
                }

              </div>
            </div>
          </div>
          {
            allArrays.length !== 0 && <Map
              arrays={allArrays}
              filterProps={filterProps}
              centerMap={centerMap}
              display={displayMap}
              visible={visibleMap}
              className={mapYMapClass}
              openViewArray={this.openViewArray.bind(this)}
            />
          }
        </main>
        {
          displayModal && <Modal
            display={displayModal}
            visible={visibleModal}
            data={dataModal}
            title={"Чтобы забронировать участок, оставьте заявку"}
            desc={"<p>менеджер разъяснит все детали и подберет<br /> удобное время для визита к нам в офис</p>"}
            button={"Забронировать"}
            onClose={this.togglePopup}
          />
        }
      </Fragment>
    );
  }
}

const mapStateToProps = state => ({
  arrays: filteringArrays(state.arrays, state.filterProps),
  allArrays: toArr(state.arrays),
  filterProps: getFilterProps(state),
  isMobile: state.isMobile
});

export default connect(mapStateToProps, null)(AllCity);