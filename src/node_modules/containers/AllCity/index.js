import React, {Component, Fragment} from 'react';
import {connect} from 'react-redux';

import classnames from 'classnames';

import {fetchArrays} from 'actions';
import {toArr, getPlots, getFilterProps, filteringArrays} from 'selectors';

import Header from 'components/Header';
import MainFilter from 'components/MainFilter';
import { CardArray } from 'components/CardArray';
import { CardSite } from 'components/CardSite';

import Map from './Map';

class AllCity extends Component {
  constructor(props) {
    super(props);

    this.state = {
      displayFilter: false,
      visibleFilter: false,
      displayMap: false,
      visibleMap: false,
      isOpenArray: false,
      isOpenArrayId: 1,
      centerMap: [],
      closeCards: false
    };

    this.toggleFilter = this.toggleFilter.bind(this);
    this.toggleMap = this.toggleMap.bind(this);
    this.toggleCards = this.toggleCards.bind(this);
    this.updateFilter = this.updateFilter.bind(this);
  }

	componentDidMount() {
    this.props.fetchArrays();
  }
  
  toggleMap() {
    const { displayMap, visibleMap } = this.state;

    if(!displayMap) {
      this.setState({displayMap: !displayMap});
      setTimeout(() => {
        this.setState({visibleMap: !visibleMap});
      }, 5);
    } else {
      this.setState({visibleMap: !visibleMap});
      setTimeout(() => {
        this.setState({displayMap: !displayMap});
      }, 300);
    }
  }

  toggleCards() {
    this.setState({ closeCards: !this.state.closeCards });
  }

  toggleFilter() {
    const { displayFilter, visibleFilter } = this.state;

    if(!displayFilter) {
      this.setState({displayFilter: !displayFilter});
      setTimeout(() => {
        this.setState({visibleFilter: !visibleFilter});
      }, 5);
    } else {
      this.setState({visibleFilter: !visibleFilter});
      setTimeout(() => {
        this.setState({displayFilter: !displayFilter});
      }, 300);
    }
  }

  openViewArray(id) {
    this.setState({
      isOpenArray: true,
      isOpenArrayId: id
    });
  }

  setCenterMap(id) {
    this.setState({centerMap: this.props.allArrays.filter(el => el.id === id)[0].coords.split(',')});
  }

  updateFilter() {
    this.setState({centerMap: []});
  }

  closeViewArray() {
    this.setState({isOpenArray: false});
  }

  render() {
    const {allArrays, arrays, filterProps, filter} = this.props;
    const { displayFilter, visibleFilter, displayMap, visibleMap, isOpenArray, isOpenArrayId, centerMap, closeCards } = this.state;

    const filterArrays = toArr(arrays);
    const filterArraysLength = toArr(arrays).length;
    const filterPlotsLength = toArr(getPlots(arrays)).length;

    const mapCardsClass = classnames("page-map__cards", "map-cards", {
      "close": closeCards
    });
    const mapYMapClass = classnames({
      "open": closeCards
    });

    return (
      <Fragment>
        <Header/>
        <main className="main page-map">
          <div className="page-map__toggle-navs map-tgl-navs">
            <button
              onClick={this.toggleFilter}
              className="map-tgl-navs__filter"
            >
              <span>Фильтр</span>
            </button>
            <button
              onClick={this.toggleMap}
              className="map-tgl-navs__map"
            >
              <span>Карта</span>
            </button>
          </div>
          <MainFilter
            pageMap={true}
            filter={filter}
            display={displayFilter}
            visible={visibleFilter}
            toggleFilter={this.toggleFilter}
            updateFilter={this.updateFilter}
          />
          <div className={mapCardsClass}>
            <button
              onClick={this.toggleCards}
              className="map-cards__toggle"
            >
              {
                closeCards && <span>развернуть</span>
              }
              {
                !closeCards && <span>свернуть</span>
              }
            </button>
            <div className="map-cards__wrap">
              <div className="map-cards__head">
                {
                  isOpenArray && <Fragment>
                    <h1 className="map-cards__title">{filterArrays[isOpenArrayId].name}</h1>
                    <button
                      onClick={this.closeViewArray.bind(this)}
                      className="map-cards__back"
                    >
                      <div className="btn btn_arrow_left btn_color_body-text btn_sm">
                        <img src="/img/ui-icon/arrow-left.svg" />
                      </div>
                      <span>Назад к результатам поиска</span>
                    </button>
                  </Fragment>
                }
                {
                  !isOpenArray && <Fragment>
                    <h1 className="map-cards__title">Результаты поиска:</h1>
                    <h2 className="map-cards__subtitle">Найдено {filterPlotsLength} участков в {filterArraysLength} массивах</h2>
                  </Fragment>
                }
              </div>
              <div className="map-cards__body">
                {
                  isOpenArray && filterArrays.length !== 0 && filterArrays[isOpenArrayId].land_plots.map((element , id) => {
                    return <CardSite
                      key={id}
                      id={element.id}
                      name={element.name}
                      adress={element.adress}
                      area={element.area}
                      price={element.price_total}
                    />
                  })
                }
                {
                  !isOpenArray && filterArrays.length !== 0 && filterArrays.map((element, id) => {
                    return <CardArray
                      key={id}
                      id={element.id}
                      count={element.land_plots.length}
                      urlImg={element.main_img.size.sm.url}
                      name={element.name}
                      price100={element.price_100}
                      addClass={['map-cards__item']}
                      onChangeArray={this.openViewArray.bind(this)}
                      onChangeMap={this.setCenterMap.bind(this)}
                    />
                  })
                }

              </div>
            </div>
          </div>
          {
            allArrays.length !== 0 && <Map
              arrays={allArrays}
              filterProps={filterProps}
              centerMap={centerMap}
              display={displayMap}
              visible={visibleMap}
              className={mapYMapClass}
            />
          }
        </main>
      </Fragment>
    );
  }
}

const mapStateToProps = (state) => ({
  arrays: filteringArrays(state.arrays, state.filterProps),
  allArrays: toArr(state.arrays),
  filterProps: getFilterProps(state)
});

const mapDispatchToProps = {
  fetchArrays
};

export default connect(mapStateToProps, mapDispatchToProps)(AllCity);