import React, {Component, Fragment} from 'react';
import {connect} from 'react-redux';
import {Link} from 'react-router';
import classnames from 'classnames';

import {fetchArrays} from 'actions';
import {toArr, filteringArrays, getPlotsPage, getPlots} from 'selectors';

import Header from 'components/Header';
import MainFilter from 'components/MainFilter';
import Modal from 'components/Modal';
import { CardSite2 } from 'components/CardSite2';

import {Sort, ArrowLeft, ArrowRight} from 'components/UiIcon';

class Plots extends Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      offset: 0,
      displayFilter: false,
      visibleFilter: false,
      displayModal: false,
      visibleModal: false,
      dataModal: {}
    }

    this.toggleFilter = this.toggleFilter.bind(this);
    this.togglePopup = this.togglePopup.bind(this);
    this.renderPaginate = this.renderPaginate.bind(this)
  }

	componentDidMount() {
		this.props.fetchArrays();
  }
  
  toggleFilter() {
    const { displayFilter, visibleFilter } = this.state;

    if(!displayFilter) {
      this.setState({displayFilter: !displayFilter});
      setTimeout(() => {
        this.setState({visibleFilter: !visibleFilter});
      }, 5);
    } else {
      this.setState({visibleFilter: !visibleFilter});
      setTimeout(() => {
        this.setState({displayFilter: !displayFilter});
      }, 300);
    }
  }

  togglePopup(id) {
    const { displayModal, visibleModal } = this.state;

    if(!displayModal) {
      this.setState({
        displayModal: !displayModal,
        dataModal: {
          form: 'form-land-plot',
          land_plot_id: id
        }
      });
      setTimeout(() => {
        this.setState({visibleModal: !visibleModal});
      }, 5);
    } else {
      this.setState({visibleModal: !visibleModal});
      setTimeout(() => {
        this.setState({displayModal: !displayModal});
      }, 200);
    }
  }

  renderPaginate(plotsLength, paginateId) {
    const length = Math.ceil(plotsLength / 10);
    const id = parseInt(paginateId);
    let allLinks = [];
    if( length <= 5 ) {
      for( let i = 1 ; i <= length ; i++ ) {
        allLinks.push(i);
      }
    } else if(id + 5 <= length) {
      for( let i = id ; i <= id + 5 ; i++ ) {
        allLinks.push(i);
      }
    } else {
      for( let i = length - 5 ; i <= length ; i++ ) {
        allLinks.push(i);
      }
    }
    return (
      <ul className="paginator">
        {
          id !== 1 && <li className="paginator__prev">
            <Link
              to={`/plots/${id-1}`}
              className="btn btn_arrow_left btn_color_white-f"
            >
              <ArrowLeft />
              <span>Предыдущая</span>
            </Link>
          </li>
        }
        {
          allLinks.map(i => {
            const pageClass = classnames(
              'btn',
              'btn_sm', {
                'btn_color_white-f': i !== id,
                'btn_color_ac': i === id
            });
            return (
              <li
                key={i}
                className="paginator__page"
              >
                <Link
                  to={`/plots/${i}`}
                  className={pageClass}
                >{i}</Link>
              </li>
            );
          })
        }
        {
          id !== length && <li className="paginator__next">
            <Link
              to={`/plots/${id+1}`}
              className="btn btn_arrow_right btn_color_white-f"
            >
              <span>Следующая</span>
              <ArrowRight />
            </Link>
          </li>
        }
      </ul>
    );
  }

  render() {
    const { arrays, paginateId } = this.props;
    const { displayFilter, visibleFilter, displayModal, visibleModal, dataModal } = this.state;

    const plotsLength = toArr(getPlots(arrays)).length;
    const pagePlots = getPlotsPage(arrays, paginateId);
    
    return (
      <Fragment>
        <Header/>
        <main className="main page-site">
          <div className="page-site__toggle-navs psit-tgl-navs">
            <button
              onClick={this.toggleFilter}
              className="psit-tgl-navs__filter"
            >
              <span>Фильтр</span>
            </button>
          </div>
          <MainFilter
            pagePlace={true}
            display={displayFilter}
            visible={visibleFilter}
            toggleFilter={this.toggleFilter}
          />
          <div className="page-site__main">
            <div className="page-site__site psit-site">
              <div className="container">
                <div className="row">
                  <div className="col-12">
                    <h1 className="psit-site__title">Все участки ({plotsLength} шт.)</h1>
                  </div>
                  {/* <div className="col-12">
                    <div className="psit-site__filter psit-filter">
                      <span className="psit-filter__title">Сортировать:</span>
                      <button className="psit-filter__price">
                        <Sort />
                        <span>по цене</span>
                      </button>
                      <button className="psit-filter__area active">
                        <Sort />
                        <span>по площади</span>
                      </button>
                    </div>
                  </div> */}
                </div>
                <div className="row">
                  {
                    pagePlots.length !== 0 && pagePlots.map((element, id) => {
                      return (
                        <div
                          key={id}
                          className="col-12"
                        >
                          <CardSite2
                            id={element.id}
                            arrayId={element.array_id}
                            arrayName={element.array_name}
                            name={element.name}
                            adress={element.adress}
                            area={element.area}
                            price={element.price_total}
                            openPopup={this.togglePopup}
                          />
                        </div>
                      );
                    })
                  }
                </div>
              </div>
            </div>
            
            <div className="page-site__paginator">
              <div className="container">
                <div className="row">
                  <div className="col-12">
                    {this.renderPaginate(plotsLength, paginateId)}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
        {
          displayModal && <Modal
            display={displayModal}
            visible={visibleModal}
            data={dataModal}
            title={"Чтобы забронировать участок, оставьте заявку"}
            desc={"<p>менеджер разъяснит все детали и подберет<br /> удобное время для визита к нам в офис</p>"}
            onClose={this.togglePopup}
          />
        }
      </Fragment>
    );
  }
}

const mapStateToProps = (state, ownProps) => ({
  arrays: filteringArrays(state.arrays, state.filterProps),
  paginateId: ownProps.params.id
});

const mapDispatchToProps = {
  fetchArrays
};

export default connect(mapStateToProps, mapDispatchToProps)(Plots);