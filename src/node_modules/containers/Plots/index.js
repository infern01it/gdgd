import React, {Component, Fragment} from 'react';
import {connect} from 'react-redux';
import {Link, browserHistory} from 'react-router';

import ReactPaginate from 'react-paginate';

import {fetchArrays} from 'actions';
import {toArr, filteringArrays, getPlotsPage, getPlots} from 'selectors';

import Header from 'components/Header';
import MainFilter from 'components/MainFilter';
import { CardSite2 } from 'components/CardSite2';

import {Sort, ArrowLeft, ArrowRight} from 'components/UiIcon';

class Plots extends Component {
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      offset: 0,
      paginateId: props.paginateId,
      displayFilter: false,
      visibleFilter: false
    }

    this.handlePageChange = this.handlePageChange.bind(this);
    this.toggleFilter = this.toggleFilter.bind(this);
    this.renderPaginate = this.renderPaginate.bind(this)
  }

	componentDidMount() {
		this.props.fetchArrays();
  }
  
  handlePageChange = (data) => {
    console.log(123);
    let selected = data.selected+1;
    browserHistory.push(`/plots/${selected}`);
  };

  toggleFilter() {
    const { displayFilter, visibleFilter } = this.state;

    if(!displayFilter) {
      this.setState({displayFilter: !displayFilter});
      setTimeout(() => {
        this.setState({visibleFilter: !visibleFilter});
      }, 5);
    } else {
      this.setState({visibleFilter: !visibleFilter});
      setTimeout(() => {
        this.setState({displayFilter: !displayFilter});
      }, 300);
    }
  }

  renderPaginate(length, id) {
    return (
      <Link to={`/plots/${id}`}>{id}</Link>
    );
  }

  render() {
    const { arrays } = this.props;
    const { displayFilter, visibleFilter, paginateId } = this.state;

    const plotsLength = toArr(getPlots(arrays)).length;
    const pagePlots = getPlotsPage(arrays, paginateId);
    
    return (
      <Fragment>
        <Header/>
        <main className="main page-site">
          <div className="page-site__toggle-navs psit-tgl-navs">
            <button
              onClick={this.toggleFilter}
              className="psit-tgl-navs__filter"
            >
              <span>Фильтр</span>
            </button>
          </div>
          <MainFilter
            pagePlace={true}
            display={displayFilter}
            visible={visibleFilter}
            toggleFilter={this.toggleFilter}
          />
          <div className="page-site__main">
            <div className="page-site__site psit-site">
              <div className="container">
                <div className="row">
                  <div className="col-12">
                    <h1 className="psit-site__title">Все участки ({plotsLength} шт.)</h1>
                  </div>
                  <div className="col-12">
                    <div className="psit-site__filter psit-filter">
                      <span className="psit-filter__title">Сортировать:</span>
                      <button className="psit-filter__price">
                        <Sort />
                        <span>по цене</span>
                      </button>
                      <button className="psit-filter__area active">
                        <Sort />
                        <span>по площади</span>
                      </button>
                    </div>
                  </div>
                </div>
                <div className="row">
                  {
                    pagePlots.length !== 0 && pagePlots.map((element, id) => {
                      return (
                        <div
                          key={id}
                          className="col-12"
                        >
                          <CardSite2
                            name={element.name}
                            arrayName={element.array_name}
                            adress={element.adress}
                            area={element.area}
                            price={element.price_total}
                          />
                        </div>
                      );
                    })
                  }
                </div>
              </div>
            </div>

            <div>
              {this.renderPaginate(plotsLength, paginateId)}
            </div>
            
            <div className="page-site__paginator">
              <div className="container">
                <div className="row">
                  <div className="col-12">
                    <ReactPaginate
                      containerClassName={"paginator"}

                      breakClassName={"paginator__break"}

                      previousClassName={"paginator__prev"}
                      previousLinkClassName={"btn btn_arrow_left btn_color_white-f"}

                      pageClassName={"paginator__page"}
                      pageLinkClassName={"btn btn_sm btn_color_white-f"}

                      nextClassName={"paginator__next"}
                      nextLinkClassName={"btn btn_arrow_right btn_color_white-f"}

                      activeClassName={"active"}
                      previousLabel={
                        <Fragment>
                          <ArrowLeft />
                          <span>Предыдущая</span>
                        </Fragment>
                      }
                      nextLabel={
                        <Fragment>
                          <span>Следующая</span>
                          <ArrowRight />
                        </Fragment>
                      }
                      breakLabel={<a href="">...</a>}
                      forcePage={parseInt(paginateId)}
                      pageCount={plotsLength / 10}
                      marginPagesDisplayed={2}
                      pageRangeDisplayed={5}
                      onPageChange={this.handlePageChange} />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </Fragment>
    );
  }
}

const mapStateToProps = (state, ownProps) => ({
  arrays: filteringArrays(state.arrays, state.filterProps),
  paginateId: ownProps.params.id
});

const mapDispatchToProps = {
  fetchArrays
};

export default connect(mapStateToProps, mapDispatchToProps)(Plots);