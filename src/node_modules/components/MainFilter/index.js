import React, {Component} from 'react';
import {connect} from 'react-redux';
import {Link, browserHistory} from 'react-router';

import classNames from 'classnames';

import FilterField from 'components/MainFilter/filterField';
import MyMultiSelect from 'components/MyMultiSelect';
import DefaultItemRender from 'components/MyMultiSelect/defaultItemRender';
import DefaultValueSityRender from 'components/MyMultiSelect/defaultValueSityRender';
import DefaultValueConceptRender from 'components/MyMultiSelect/defaultValueConceptRender';

import {fetchConcept, fetchCity, updateFilterProps, clearFilterProps} from 'actions';
import {getConceptInFilter, getCityInFilter, getFilterProps} from 'selectors';

class MainFilter extends Component {
  constructor(props) {
    super(props);

    this.handleFieldPriceChangedMin = this.handleFieldPriceChangedMin.bind(this);
    this.handleFieldPriceChangedMax = this.handleFieldPriceChangedMax.bind(this);
    this.handleFieldAreaChangedMin = this.handleFieldAreaChangedMin.bind(this);
    this.handleFieldAreaChangedMax = this.handleFieldAreaChangedMax.bind(this);
    this.handleSelectedSityChanged = this.handleSelectedSityChanged.bind(this);
    this.handleSelectedConceptChanged = this.handleSelectedConceptChanged.bind(this);
    this.updateFilter = this.updateFilter.bind(this);
  }

	componentDidMount() {
		this.props.fetchConcept();
    this.props.fetchCity();
  }

  updateFilter() {
    this.props.updateFilter();
  }

	handleSelectedSityChanged(selected) {
    this.props.updateFilterProps({ city_id: selected });
    this.updateFilter();
    if(this.props.pageMap) {
      browserHistory.push('/all-city');
    }
  }

	handleSelectedConceptChanged(selected) {
    this.props.updateFilterProps({ concept_id: selected });
    this.updateFilter();
  }

  handleFieldPriceChangedMin(number) {
    this.props.updateFilterProps({ price_min: number });
    this.updateFilter();
  }

  handleFieldPriceChangedMax(number) {
    this.props.updateFilterProps({ price_max: number });
    this.updateFilter();
  }

  handleFieldAreaChangedMin(number) {
    this.props.updateFilterProps({ area_min: number });
    this.updateFilter();
  }

  handleFieldAreaChangedMax(number) {
    this.props.updateFilterProps({ area_max: number });
    this.updateFilter();
  }

  handleClearFilter() {
    this.props.clearFilterProps();
    this.updateFilter();
  }

  componentWillMount() {
    const {filter, updateFilterProps} = this.props;
    if(typeof filter !== 'undefined' && filter.city_id.length !== 0) {
      updateFilterProps({ city_id: filter.city_id });
      this.updateFilter();
    }
  }
  
  render() {
    const {msCity, msConcept, pageMap, pageHome, pagePlace, filterProps, display, visible, toggleFilter, updateFilter } = this.props;
    //updateFilter = this.updateFilter();

    const filterClass = classNames({
      'home-filter': pageHome,
      'main-filter': pageMap || pagePlace,
      'page-home__filter': pageHome,
      'page-map__filter': pageMap,
      'page-site__filter': pagePlace,
      'display': display,
      'visible': visible
    });

    const filterContainerClass = classNames({
      'home-filter__container': pageHome,
      'main-filter__container': pageMap || pagePlace
    });

    const filterPriceClass = classNames({
      'home-filter__price': pageHome,
      'main-filter__price': pageMap || pagePlace
    });

    const filterAreaClass = classNames({
      'home-filter__area': pageHome,
      'main-filter__area': pageMap || pagePlace
    });

    const filterSityClass = classNames({
      'home-filter__sity': pageHome,
      'main-filter__sity': pageMap || pagePlace
    });

    const filterConceptClass = classNames({
      'home-filter__concept': pageHome,
      'main-filter__concept': pageMap || pagePlace
    });

    const filterButtonClass = classNames({
      'home-filter__button': pageHome,
      'main-filter__button': pageMap || pagePlace
    })

    return (
      <div className={filterClass}>
        <div className={filterContainerClass}>
          <div className={filterPriceClass}>
            <FilterField
              type="price"
              name="Цена, млн. руб"
              min=""
              max=""
              valueMin={filterProps.price_min}
              valueMax={filterProps.price_max}
              onChangedMin={this.handleFieldPriceChangedMin}
              onChangedMax={this.handleFieldPriceChangedMax}
            />
          </div>
          <div className={filterAreaClass}>
            <FilterField
              type="area"
              name="Площадь, сотки"
              min=""
              max=""
              valueMin={filterProps.area_min}
              valueMax={filterProps.area_max}
              onChangedMin={this.handleFieldAreaChangedMin}
              onChangedMax={this.handleFieldAreaChangedMax}
            />
          </div>
          <div className={filterSityClass}>
            <div className="card-filter-field">
              <p className="card-filter-field__title">Расположение</p>
              <div className="card-filter-field__inputs">
                <MyMultiSelect
                  addClass="card-filter-field__select"
                  options={msCity}
                  onSelectedChanged={this.handleSelectedSityChanged}
                  selected={filterProps.city_id}
                  ItemRenderer={DefaultItemRender}
                  valueRenderer={DefaultValueSityRender}
                  disableSearch={true}
                  selectAllLabel="Все города"
                />
              </div>
            </div>
          </div>
          <div className={filterConceptClass}>
            <div className="card-filter-field">
              <p className="card-filter-field__title">Концепция</p>
              <div className="card-filter-field__inputs">
                <MyMultiSelect
                  addClass="card-filter-field__select"
                  options={msConcept}
                  onSelectedChanged={this.handleSelectedConceptChanged}
                  selected={filterProps.concept_id}
                  ItemRenderer={DefaultItemRender}
                  valueRenderer={DefaultValueConceptRender}
                  disableSearch={true}
                  selectAllLabel="Все концепции"
                />
              </div>
            </div>
          </div>
          <div className={filterButtonClass}>
            <div className="card-filter-field">
              <p className="card-filter-field__title"></p>
              {
                pageHome && <div className="card-filter-field__inputs">
                  <Link
                    to="/all-city"
                    className="btn btn_color_ac card-filter-field__button"
                  >Показать</Link>
                </div>
              }
              {
                (pageMap || pagePlace) && <div className="card-filter-field__inputs">
                  <button
                    className="btn btn_color_ac card-filter-field__button"
                    onClick={this.handleClearFilter.bind(this)}
                  >Сбросить</button>
                </div>
              }
            </div>
          </div>
        </div>
        { 
          (pageMap || pagePlace) && <div
            onClick={toggleFilter}
            className="main-filter__bg"
          ></div> 
        }
      </div>
    );
  }
}

const mapStateToProps = state => ({
	msConcept: getConceptInFilter(state),
  msCity: getCityInFilter(state),
  filterProps: getFilterProps(state)
});

const mapDispatchToProps = {
  fetchConcept,
  fetchCity,
  updateFilterProps,
  clearFilterProps
};

export default connect(mapStateToProps, mapDispatchToProps)(MainFilter);