import React, {Component} from 'react';

import classNames from 'classnames';

import LoadingIndicator from './loading-indicator.js';

class Dropdown extends Component {
	state = {
		expanded: false,
		hasFocus: false,
	}

	componentWillUpdate() {
		document.addEventListener('touchstart', this.handleDocumentClick);
		document.addEventListener('mousedown', this.handleDocumentClick);
	}

	componentWillUnmount() {
		document.removeEventListener('touchstart', this.handleDocumentClick);
		document.removeEventListener('mousedown', this.handleDocumentClick);
	}

	handleDocumentClick = (event) => {
		if (this.wrapper && !this.wrapper.contains(event.target)) {
			this.setState({expanded: false});
		}
	}

	handleKeyDown = (e) => {
		switch (e.which) {
			case 27: // Escape
				this.toggleExpanded(false);
				break;
			case 38: // Up Arrow
				this.toggleExpanded(false);
				break;
			case 40: // Down Arrow
				this.toggleExpanded(true);
				break;
			default:
				return;
		}

		e.preventDefault();
	}

	handleFocus = (e) => {
		const {hasFocus} = this.state;

		if (e.target === this.wrapper && !hasFocus) {
			this.setState({hasFocus: true});
		}
	}

	handleBlur = (e) => {
		const {hasFocus} = this.state;

		if (hasFocus) {
			this.setState({hasFocus: false});
		}
	}

	handleMouseEnter = (e) => {
		this.handleHover(true);
	}

	handleMouseLeave = (e) => {
		this.handleHover(false);
	}

	handleHover = (toggleExpanded) => {
		const {shouldToggleOnHover} = this.props;

		if (shouldToggleOnHover) {
			this.toggleExpanded(toggleExpanded);
		}
	}

	toggleExpanded = (value) => {
		const {isLoading} = this.props;
		const {expanded} = this.state;

		if (isLoading) {
			return;
		}

		const newExpanded = value === undefined ? !expanded : !!value;

		this.setState({expanded: newExpanded});

		if (!newExpanded && this.wrapper) {
			this.wrapper.focus();
		}
	}

	renderPanel() {
		const {contentComponent: ContentComponent, contentProps} = this.props;

		return <div
			className="dropdown__body dropdown-body"
		>
			<ContentComponent {...contentProps} />
		</div>;
	}

	render() {
		const {expanded, hasFocus} = this.state;
		const {children, isLoading, disabled} = this.props;

		const dp = 'dropdown';

		const dpHeading = classNames([
			'dropdown__head',
			'dropdown-head',
			{
				'expanded': expanded,
				'focus': hasFocus,
				'disabled': disabled
			}
		]);
		const dpHeadingValue = classNames([
			'dropdown-head__value',
			{
				'disabled': disabled
			}
		]);
		const dpHeadingLoad = classNames([
			'dropdown-head__load'
		]);
		const dpHeadingArrow = classNames([
			'dropdown-head__arrow',
			{
				'up': expanded,
				'down': !expanded
			}
		]);

		return <div
			className={dp}
			tabIndex="0"
			role="combobox"
			aria-expanded={expanded}
			aria-readonly="true"
			aria-disabled={disabled}
			ref={ref => this.wrapper = ref}
			onKeyDown={this.handleKeyDown}
			onFocus={this.handleFocus}
			onBlur={this.handleBlur}
			onMouseEnter={this.handleMouseEnter}
			onMouseLeave={this.handleMouseLeave}
		>
			<div
				className={dpHeading}
				onClick={() => this.toggleExpanded()}
			>
				<span
					className={dpHeadingValue}
				>
					{children}
				</span>
				<span
					className={dpHeadingLoad}
				>
					{isLoading && <LoadingIndicator />}
				</span>
				<span
					className={dpHeadingArrow}
				>
					<span />
				</span>
			</div>
			{expanded && this.renderPanel()}
		</div>;
	}
}

export default Dropdown;