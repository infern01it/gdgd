import React, { Component } from 'react';
import { Link, browserHistory } from 'react-router';
import { connect } from 'react-redux';

import {sendModal, updateFilterProps} from 'actions';
import {getCityInMenu} from 'selectors';

import classNames from 'classnames';

import CallbeckForm from './CallbackForm';
import MenuLink from './MenuLink';

import {Logo, Callback, Menu} from 'components/UiIcon';

class Header extends Component {
  constructor(props) {
    super(props);

    this.state = {
      displayMenu: false,
      visibleMenu: false,
      displayDropdownForm: false,
      submit: false
    };

    this.toggleMenu = this.toggleMenu.bind(this);
    this.toggleDropdownForm = this.toggleDropdownForm.bind(this);
    this.thisPage = this.thisPage.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  toggleMenu() {
    const { displayMenu, visibleMenu, displayDropdownForm } = this.state;

    if(displayDropdownForm) {
      this.setState({displayDropdownForm: !displayDropdownForm});
    }
    
    if(!displayMenu) {
      this.setState({displayMenu: !displayMenu});
      setTimeout(() => {
        this.setState({visibleMenu: !visibleMenu});
      }, 5);
    } else {
      this.setState({visibleMenu: !visibleMenu});
      setTimeout(() => {
        this.setState({displayMenu: !displayMenu});
      }, 300);
    }
  }

  toggleDropdownForm(e) {
    const { isMobile } = this.props;
    const { displayDropdownForm, displayMenu, visibleMenu } = this.state;

    if(displayMenu) {
      this.setState({displayMenu: !displayMenu});
      this.setState({visibleMenu: !visibleMenu});
    }

    if( typeof e !== 'undefined' ) {
      if( isMobile && e.type === 'mouseenter' || !isMobile && e.type === 'click' ) return;
      if( !displayDropdownForm && e.type === 'mouseleave' ) return;
    }
    this.setState({displayDropdownForm: !displayDropdownForm});
  }

  handleSubmit(values) {
    const { siteSettings } = this.props;

    const dataForm = {
      form: 'form-callback',
      csrf: siteSettings.token
    }
    sendModal({ ...dataForm, ...values });
    this.setState({submit: true});

    setTimeout(() => {
      this.toggleDropdownForm();
    }, 3000);
  }

  thisPage(prop) {
    return prop === window.location.pathname.split('/')[1];
  }

  render() {
    const { siteSettings, home, city, isMobile } = this.props;
    const { displayMenu, visibleMenu, displayDropdownForm, submit } = this.state;
    const headerClass = classNames('header', {header_home: home});
    const headerLogoClass = classNames('header__logo', 'hdr-logo', {'hdr-logo_home': home});
    const headerMenuClass = classNames('header__menu', 'hdr-menu', {'hdr-menu_home': home});
    const headerMenuContainerClass = classNames('hdr-menu__container', {'display': displayMenu}, {'visible': visibleMenu});
    const headerCallbackClass = classNames('header__callback', 'hdr-callback', {'hdr-callback_home': home, 'open': displayDropdownForm});

    return (
      <header className={headerClass}>
        <div className="header__left">
          <Link
            to="/"
            className={headerLogoClass}
          >
            <Logo />
          </Link>
        </div>
        <div className="header__middle">
          <div className={headerMenuClass}>
            <button
              onClick={this.toggleMenu}
              className="hdr-menu__button"
            >
              <Menu />
            </button>
            <div className={headerMenuContainerClass}>
              <ul className="hdr-menu__left">
                <li>
                  <a
                    href="#"
                    onClick={e => {
                      e.preventDefault();
                      browserHistory.push({
                        pathname: '/all-city'
                      });
                      this.props.updateFilterProps({ city_id: [] });
                      if(isMobile) this.toggleMenu();
                    }}
                  >Все города</a>
                </li>
                {
                  city.length !== 0 && city.map((el, id) => 
                    <li key={id}>
                      <a
                        href="#"
                        onClick={e => {
                          e.preventDefault();
                          browserHistory.push({
                            pathname: '/all-city',
                            query: { city: el.translit_name }
                          });
                          this.props.updateFilterProps({ city_id: [el.translit_name] });
                          if(isMobile) this.toggleMenu();
                        }}
                      >{el.name}</a>
                    </li>
                  )
                }
              </ul>
              <ul className="hdr-menu__right">
                <li>
                  <MenuLink
                    isMobile={isMobile}
                    thisPage={this.thisPage('plots')}
                    link1={<Link to="/plots/1">Участки</Link>}
                    link2={<a
                      href="#"
                      onClick={e => this.toggleMenu(e)}
                    >Участки</a>}
                  />
                </li>
                <li>
                  <MenuLink
                    isMobile={isMobile}
                    thisPage={this.thisPage('partners')}
                    link1={<Link to="/partners">Партнёрам</Link>}
                    link2={<a
                      href="#"
                      onClick={e => this.toggleMenu(e)}
                    >Партнёрам</a>}
                  />
                </li>
                <li>
                  <MenuLink
                    isMobile={isMobile}
                    thisPage={this.thisPage('contacts')}
                    link1={<Link to="/contacts">Контакты</Link>}
                    link2={<a
                      href="#"
                      onClick={e => this.toggleMenu(e)}
                    >Контакты</a>}
                  />
                </li>
              </ul>
              <div className="hdr-menu__phone">
                { siteSettings.contact_phone && <a href={`tel:${siteSettings.contact_phone}`}>{siteSettings.contact_phone}</a> }
              </div>
            </div>
          </div>
        </div>
        <div className="header__right">
          <div className="header__phone">
            { siteSettings.contact_phone && <a href={`tel:${siteSettings.contact_phone}`} className="hdr-phone">
              <span>{siteSettings.contact_phone}</span>
            </a> }
          </div>
          <div
            className={headerCallbackClass}
            onMouseEnter={this.toggleDropdownForm}
            onMouseLeave={this.toggleDropdownForm}
          >
            <button
              className="hdr-callback__button"
              onClick={this.toggleDropdownForm}
            >
              <Callback />
            </button>
            <div className="hdr-callback__dropdown">
              {
                submit && <div className="hdr-cb-dd hdr-cb-dd_submit">
                  <h4 className="hdr-cb-dd__title">Спасибо! Заявка отправлена.</h4>
                  <p className="hdr-cb-dd__desc">Наш менеджер скоро с Вами свяжется</p>
                </div>
              }
              
              { !submit && <CallbeckForm onSubmit={this.handleSubmit}/> }
            </div>
          </div>
        </div>
      </header>
    );
  }
}

const mapStateToProps = state => ({
  city: getCityInMenu(state.city),
  siteSettings: state.siteSettings,
  isMobile: state.isMobile
});

const mapDispatchToProps = {
  updateFilterProps
};

export default connect(mapStateToProps, mapDispatchToProps)(Header);
