import {
	FETCH_ARRAYS_START,
	FETCH_ARRAYS_SUCCESS,
	FETCH_ARRAYS_FAILURE,
	FETCH_CONCEPT_START,
	FETCH_CONCEPT_SUCCESS,
	FETCH_CONCEPT_FAILURE,
	FETCH_CITY_START,
	FETCH_CITY_SUCCESS,
	FETCH_CITY_FAILURE,
	UPDATE_FILTER_PROPS,
	CLEAR_FILTER_PROPS,
	UPDATE_WINDOW_WIDTH_PROPS
} from 'actionTypes';

import {
	fetchArrays as fetchArraysApi,
	fetchConcept as fetchConceptApi,
	fetchCity as fetchCityApi,
	sendModal as sendModalApi
} from 'api';


/* Получение массива обьектов с массивами из базы */
export const fetchArrays = () => async dispatch => {
	dispatch({type: FETCH_ARRAYS_START});

	try {
		const arrays = await fetchArraysApi();
		dispatch({
			type: FETCH_ARRAYS_SUCCESS,
			payload: arrays
		});
	} catch(err) {
		dispatch({
			type: FETCH_ARRAYS_FAILURE,
			payload: err,
			error: true
		});
	}
}

/* Получение массива обьектов с концепциями из базы */
export const fetchConcept = () => async dispatch => {
	dispatch({type: FETCH_CONCEPT_START});

	try {
		const concept = await fetchConceptApi();
		dispatch({
			type: FETCH_CONCEPT_SUCCESS,
			payload: concept
		});
	} catch(err) {
		dispatch({
			type: FETCH_CONCEPT_FAILURE,
			payload: err,
			error: true
		});
	}
}

/* Получение массива обьектов с городами из базы */
export const fetchCity = () => async dispatch => {
	dispatch({type: FETCH_CITY_START});

	try {
		const city = await fetchCityApi();
		dispatch({
			type: FETCH_CITY_SUCCESS,
			payload: city
		});
	} catch(err) {
		dispatch({
			type: FETCH_CITY_FAILURE,
			payload: err,
			error: true
		});
	}
}

/* Обновление фильтра */
export const updateFilterProps = props => dispatch => {
	dispatch({
		type: UPDATE_FILTER_PROPS,
		payload: props
	});
}

/* Очистка фильтра */
export const clearFilterProps = () => dispatch => {
	dispatch({
		type: CLEAR_FILTER_PROPS
	});
}

/* Отправка форм */
export const sendModal = props => {
	sendModalApi(props);
}

/* Размер устройства */
export const updateWindowWidth = props => dispatch => {
	dispatch({
		type: UPDATE_WINDOW_WIDTH_PROPS,
		payload: props
	});
}